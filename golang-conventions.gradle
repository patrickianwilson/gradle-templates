/*

This convention plugin requires the following ext {} block on the project applying the plugin:

ext {
    mainPackage= "project"
    runArgs = ["help"]
}
*/

apply plugin: "maven-publish"


version = '0.1'
group = "com.github.patrickianwilson"


task copyGoSrc(type: Copy) {
    from "src/main/go"
    into "$project.buildDir/gopath/src"
}

task packageGoLib(type: Zip) {
    from "${project.projectDir}/src/main/go"
    include "**/*.go"
    exclude "**/*_test.go"
    archiveName "${project.buildDir}/libs/ModuleServiceSdkGo.zip"
}
configurations {
    gopath
    compile
}
artifacts {
    gopath packageGoLib
}

task fetchExternDeps(type: Exec, dependsOn: ["copyGoSrc", "copyGoDeps"]) {
    workingDir "$project.buildDir/gopath"
    commandLine 'go', 'get', "-d", "./..."

    environment ("GOPATH", "$project.buildDir/gopath")
}

task copyGoDeps(type: Copy) {
    from {
        configurations.compile.collect { zipTree(it) }
    }
    into "${project.buildDir}/gopath/src"
}

task assembleGo (type: Exec, dependsOn: ["copyGoDeps", "copyGoSrc"]) {

    workingDir "$project.buildDir/gopath"
    commandLine 'go', 'install', project.mainPackage

    inputs.dir "$project.buildDir/gopath/src/"
    outputs.dir "$projectDir/pkg"
    outputs.dir "$projectDir/bin"

    environment ("GOPATH", "$project.buildDir/gopath")

    def executableName = project.mainPackage.lastIndexOf("/") != -1 ? project.mainPackage.substring(project.mainPackage.lastIndexOf("/")) : project.mainPackage
    logger.info("Assuming executable name: $executableName")
    outputs.file "$project.buildDir/gopath/$executableName"

}

publishing {
    publications {
        mavenJava(MavenPublication) {

            artifact packageGoLib {
                classifier "sources"
            }
        }
    }
}

task cleanGo(type: Delete) {
    delete "$project.buildDir"
}


repositories {
    mavenLocal()
}
